Mon Nov 28 06:18:46 UTC 2022
Linux LinuxMachine 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
[level: 1] 3-->nullptr
[level: 1] 3-->9-->nullptr
[level: 1] 1-->3-->9-->nullptr
[level: 1] 1-->3-->5-->7-->9-->nullptr
test1 done.
[level: 1] 1-->5-->7-->9-->nullptr
Created skp2 successfully
[level: 1] 1-->5-->7-->9-->nullptr
[level: 1] 1-->5-->7-->9-->nullptr
test2 done.
[level: 3] nullptr
[level: 2] 3-->5-->nullptr
[level: 1] 1-->3-->5-->7-->9-->20-->nullptr

[level: 3] -20-->nullptr
[level: 2] -20-->3-->5-->nullptr
[level: 1] -20-->1-->3-->5-->7-->9-->20-->100-->nullptr

[level: 3] nullptr
[level: 2] 3-->5-->9-->nullptr
[level: 1] 1-->3-->5-->7-->9-->20-->nullptr

test3 done.
[level: 3] 20-->nullptr
[level: 2] 3-->5-->7-->9-->20-->nullptr
[level: 1] 1-->3-->5-->7-->9-->20-->nullptr
skp2
[level: 3] 20-->nullptr
[level: 2] 3-->5-->7-->9-->20-->nullptr
[level: 1] 1-->3-->5-->7-->9-->20-->nullptr
skp
[level: 3] 20-->nullptr
[level: 2] 3-->5-->7-->9-->20-->nullptr
[level: 1] 3-->5-->7-->9-->20-->nullptr
skp
[level: 3] 20-->nullptr
[level: 2] 3-->5-->7-->20-->nullptr
[level: 1] 3-->5-->7-->20-->nullptr
skp2
[level: 3] 20-->nullptr
[level: 2] 3-->5-->7-->9-->20-->nullptr
[level: 1] 1-->3-->5-->7-->9-->20-->nullptr
test4 done.
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
14442 warnings and 1 error generated.
Error while processing /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp.
18989 warnings and 2 errors generated.
Error while processing /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/random.cpp.
33246 warnings and 3 errors generated.
Error while processing /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp.
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:48:5: error: if with identical then and else branches [bugprone-branch-clone,-warnings-as-errors]
    if (other.next[i] != nullptr) {
    ^
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:50:7: note: else branch starts here
    } else {
      ^
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:62:20: error: 2 adjacent parameters of 'SkipList' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
SkipList::SkipList(int levels, int probability)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:62:24: note: the first parameter in the range is 'levels'
SkipList::SkipList(int levels, int probability)
                       ^~~~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:62:36: note: the last parameter in the range is 'probability'
SkipList::SkipList(int levels, int probability)
                                   ^~~~~~~~~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:103:26: error: 2 adjacent parameters of 'addHelper' of similar type ('SNode *') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
void SkipList::addHelper(SNode *prev, SNode *curr, int lvs,SNode *addMe) {
                         ^~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:103:33: note: the first parameter in the range is 'prev'
void SkipList::addHelper(SNode *prev, SNode *curr, int lvs,SNode *addMe) {
                                ^~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:103:46: note: the last parameter in the range is 'curr'
void SkipList::addHelper(SNode *prev, SNode *curr, int lvs,SNode *addMe) {
                                             ^~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:118:34: error: 2 adjacent parameters of 'findPath' of similar type ('SNode *') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
void SkipList::findPath(int val, SNode *prev, SNode *curr,
                                 ^~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:118:41: note: the first parameter in the range is 'prev'
void SkipList::findPath(int val, SNode *prev, SNode *curr,
                                        ^~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:118:54: note: the last parameter in the range is 'curr'
void SkipList::findPath(int val, SNode *prev, SNode *curr,
                                                     ^~~~
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.h:25:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
#include <vector>
^        ~~~~~~~~
         <unordered_map>
/usr/include/wchar.h:35:10: error: 'stddef.h' file not found [clang-diagnostic-error]
#include <stddef.h>
         ^~~~~~~~~~
/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/cxxabi_init_exception.h:38:10: error: 'stddef.h' file not found [clang-diagnostic-error]
#include <stddef.h>
         ^~~~~~~~~~
Suppressed 33240 warnings (33240 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
5 warnings treated as errors
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./random.cpp
Running clang-format on ./skiplist.cpp
97c97
<     addHelper(path[lvs], path[lvs]->next[lvs],  lvs, temp);
---
>     addHelper(path[lvs], path[lvs]->next[lvs], lvs, temp);
103c103
< void SkipList::addHelper(SNode *prev, SNode *curr, int lvs,SNode *addMe) {
---
> void SkipList::addHelper(SNode *prev, SNode *curr, int lvs, SNode *addMe) {
=====================================================
5. No memory leaks using g++
=====================================================
=================================================================
==35572==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000008 at pc 0x000000407b34 bp 0x7ffe61abb060 sp 0x7ffe61abb050
READ of size 8 at 0x602000000008 thread T0
    #0 0x407b33 in SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:126
    #1 0x407418 in SkipList::add(int) /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:89
    #2 0x401c7a in test1() /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp:21
    #3 0x405267 in main /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp:169
    #4 0x7fd14dffecf2 in __libc_start_main (/lib64/libc.so.6+0x3acf2)
    #5 0x4019ed in _start (/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/a.out+0x4019ed)

0x602000000008 is located 8 bytes to the left of 8-byte region [0x602000000010,0x602000000018)
allocated by thread T0 here:
    #0 0x7fd14eda97b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x40e126 in __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) /usr/include/c++/8/ext/new_allocator.h:111
    #2 0x40d1ad in std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) /usr/include/c++/8/bits/alloc_traits.h:436
    #3 0x40bf5b in std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) /usr/include/c++/8/bits/stl_vector.h:296
    #4 0x40a63d in void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) /usr/include/c++/8/bits/vector.tcc:427
    #5 0x4097f2 in void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) /usr/include/c++/8/bits/vector.tcc:109
    #6 0x408959 in std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) /usr/include/c++/8/bits/stl_vector.h:1091
    #7 0x406675 in SNode::SNode(int) /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:36
    #8 0x406dd1 in SkipList::SkipList(int, int) /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:64
    #9 0x401c66 in test1() /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp:19
    #10 0x405267 in main /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp:169
    #11 0x7fd14dffecf2 in __libc_start_main (/lib64/libc.so.6+0x3acf2)

SUMMARY: AddressSanitizer: heap-buffer-overflow /home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:126 in SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int)
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa[fa]00 fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==35572==ABORTING
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==35593== Memcheck, a memory error detector
==35593== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==35593== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==35593== Command: ./a.out
==35593== Parent PID: 35428
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x401264: test1() (main.cpp:21)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593==  Address 0x5b4cea8 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403714: SkipList::SkipList(int, int) (skiplist.cpp:64)
==35593==    by 0x401250: test1() (main.cpp:19)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x401302: test1() (main.cpp:27)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593==  Address 0x5b4d018 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403929: SkipList::add(int) (skiplist.cpp:92)
==35593==    by 0x401264: test1() (main.cpp:21)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x401401: test1() (main.cpp:33)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593==  Address 0x5b4cea8 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403714: SkipList::SkipList(int, int) (skiplist.cpp:64)
==35593==    by 0x401250: test1() (main.cpp:19)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401554: test1() (main.cpp:39)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593==  Address 0x5b4d018 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403929: SkipList::add(int) (skiplist.cpp:92)
==35593==    by 0x401264: test1() (main.cpp:21)
==35593==    by 0x4029CC: main (main.cpp:169)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x4018E1: test2() (main.cpp:56)
==35593==    by 0x4029D1: main (main.cpp:170)
==35593==  Address 0x5b4eb58 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403714: SkipList::SkipList(int, int) (skiplist.cpp:64)
==35593==    by 0x401855: test2() (main.cpp:55)
==35593==    by 0x4029D1: main (main.cpp:170)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x4018E1: test2() (main.cpp:56)
==35593==    by 0x4029D1: main (main.cpp:170)
==35593==  Address 0x5b4ee88 is 8 bytes before a block of size 8 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40348F: SNode::SNode(int) (skiplist.cpp:36)
==35593==    by 0x403929: SkipList::add(int) (skiplist.cpp:92)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x4018E1: test2() (main.cpp:56)
==35593==    by 0x4029D1: main (main.cpp:170)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593==  Address 0x5b4f9b8 is 8 bytes before a block of size 32 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40374E: SkipList::SkipList(int, int) (skiplist.cpp:66)
==35593==    by 0x401C76: test3() (main.cpp:80)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593==  Address 0x5b500d8 is 8 bytes before a block of size 32 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40395F: SkipList::add(int) (skiplist.cpp:94)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593==  Address 0x5b4fd78 is 8 bytes before a block of size 32 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40395F: SkipList::add(int) (skiplist.cpp:94)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401E52: test3() (main.cpp:94)
==35593==  Address 0x5b50e58 is 8 bytes before a block of size 32 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40395F: SkipList::add(int) (skiplist.cpp:94)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x401D26: test3() (main.cpp:82)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593== 
==35593== Invalid read of size 8
==35593==    at 0x403B98: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BF4: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:128)
==35593==    by 0x403BB7: SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int) (skiplist.cpp:126)
==35593==    by 0x403908: SkipList::add(int) (skiplist.cpp:89)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x402119: test3() (main.cpp:114)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593==  Address 0x5b51e38 is 8 bytes before a block of size 32 alloc'd
==35593==    at 0x4C378C3: operator new(unsigned long) (vg_replace_malloc.c:422)
==35593==    by 0x4066A3: __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) (new_allocator.h:111)
==35593==    by 0x406017: std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) (alloc_traits.h:436)
==35593==    by 0x405739: std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) (stl_vector.h:296)
==35593==    by 0x404BCF: void std::vector<SNode*, std::allocator<SNode*> >::_M_realloc_insert<SNode*>(__gnu_cxx::__normal_iterator<SNode**, std::vector<SNode*, std::allocator<SNode*> > >, SNode*&&) (vector.tcc:427)
==35593==    by 0x4046D9: void std::vector<SNode*, std::allocator<SNode*> >::emplace_back<SNode*>(SNode*&&) (vector.tcc:109)
==35593==    by 0x40423D: std::vector<SNode*, std::allocator<SNode*> >::push_back(SNode*&&) (stl_vector.h:1091)
==35593==    by 0x40395F: SkipList::add(int) (skiplist.cpp:94)
==35593==    by 0x403C70: SkipList::add(std::vector<int, std::allocator<int> > const&) (skiplist.cpp:135)
==35593==    by 0x402119: test3() (main.cpp:114)
==35593==    by 0x4029D6: main (main.cpp:171)
==35593== 
==35593== 
==35593== HEAP SUMMARY:
==35593==     in use at exit: 3,248 bytes in 116 blocks
==35593==   total heap usage: 399 allocs, 283 frees, 90,002 bytes allocated
==35593== 
==35593== LEAK SUMMARY:
==35593==    definitely lost: 192 bytes in 6 blocks
==35593==    indirectly lost: 3,056 bytes in 110 blocks
==35593==      possibly lost: 0 bytes in 0 blocks
==35593==    still reachable: 0 bytes in 0 blocks
==35593==         suppressed: 0 bytes in 0 blocks
==35593== Rerun with --leak-check=full to see details of leaked memory
==35593== 
==35593== For lists of detected and suppressed errors, rerun with: -s
==35593== ERROR SUMMARY: 29 errors from 11 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------
test1()                           1       0 100.00%        26       6  76.92%         0       0   0.00%
test2()                           1       0 100.00%        19       2  89.47%         0       0   0.00%
test3()                           1       0 100.00%        32       8  75.00%         0       0   0.00%
test4()                           1       0 100.00%        29       6  79.31%         0       0   0.00%
main                              1       0 100.00%         8       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------
TOTAL                             5       0 100.00%       114      22  80.70%         0       0   0.00%

File '/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/random.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------
Random::random()                  3       1  66.67%         6       2  66.67%         2       1  50.00%
-------------------------------------------------------------------------------------------------------
TOTAL                             3       1  66.67%         6       2  66.67%         2       1  50.00%

File '/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp':
Name                                                                                                                                                                 Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SkipList::shouldInsertAtHigherLevel() const                                                                                                                                1       0 100.00%         3       0 100.00%         0       0   0.00%
operator<<(std::ostream&, SkipList const&)                                                                                                                                 6       0 100.00%        12       0 100.00%         4       0 100.00%
SNode::SNode(int)                                                                                                                                                          1       0 100.00%         4       0 100.00%         0       0   0.00%
SNode::SNode(SNode const&)                                                                                                                                                 1       0 100.00%         4       0 100.00%         0       0   0.00%
SNode::copyHeadVector(SNode const&)                                                                                                                                        7       0 100.00%        11       0 100.00%         4       0 100.00%
SkipList::SkipList(int, int)                                                                                                                                               4       0 100.00%         6       0 100.00%         2       0 100.00%
SkipList::SkipList(SkipList const&)                                                                                                                                        1       0 100.00%         5       0 100.00%         0       0   0.00%
SkipList::~SkipList()                                                                                                                                                      3       0 100.00%         7       0 100.00%         2       0 100.00%
SkipList::add(int)                                                                                                                                                        10       0 100.00%        13       0 100.00%         8       0 100.00%
SkipList::addHelper(SNode*, SNode*, int, SNode*)                                                                                                                           7       0 100.00%        13       0 100.00%         4       0 100.00%
SkipList::findPath(int, SNode*, SNode*, std::unordered_map<int, SNode*, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, SNode*> > >&, int)         9       0 100.00%        12       0 100.00%         6       0 100.00%
SkipList::add(std::vector<int, std::allocator<int> > const&)                                                                                                               2       0 100.00%         5       0 100.00%         2       0 100.00%
SkipList::contains(int) const                                                                                                                                              1       0 100.00%         3       0 100.00%         0       0   0.00%
SkipList::containsHelper(int, SNode*) const                                                                                                                                7       0 100.00%         9       0 100.00%         4       0 100.00%
SkipList::remove(int)                                                                                                                                                      5       0 100.00%         7       0 100.00%         4       1  75.00%
SkipList::removeHelper(int, int, SNode*, SNode*)                                                                                                                          15       0 100.00%        16       0 100.00%        10       1  90.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                     80       0 100.00%       130       0 100.00%        50       2  96.00%
/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/main.cpp:
    1|       |#include "skiplist.h"
    2|       |#include <cassert>
    3|       |#include <iostream>
    4|       |#include <sstream>
    5|       |
    6|       |using namespace std;
    7|       |
    8|       |// ************************************
    9|       |// IMPORTANT: The below tests use Random::random to get random numbers, so
   10|       |// adding more tests (or removing tests) will change how the SkipList is
   11|       |// structured! Calling Random::random unnecessarily may also break tests.
   12|       |// On the plus side, each run uses the same random numbers which makes
   13|       |// debugginng easier.
   14|       |// ************************************
   15|       |
   16|       |// testing basic operations: operator<<, add, contains
   17|      1|void test1() {
   18|      1|  stringstream outSS;
   19|      1|  SkipList skp;
   20|       |  // cout<< "Created skp" <<endl;
   21|      1|  skp.add(3);
   22|       |  // cout<< "Added 3" <<endl;
   23|      1|  outSS << skp;
   24|      1|  cout << skp; // my tester
   25|      1|  assert(outSS.str() == "[level: 1] 3-->nullptr\n");
   26|       |
   27|      0|  skp.add(9);
   28|      1|  outSS.str("");
   29|      1|  outSS << skp;
   30|      1|  cout << skp; // my tester
   31|      1|  assert(outSS.str() == "[level: 1] 3-->9-->nullptr\n");
   32|       |
   33|      0|  skp.add(1);
   34|      1|  outSS.str("");
   35|      1|  outSS << skp;
   36|      1|  cout << skp; // my tester
   37|      1|  assert(outSS.str() == "[level: 1] 1-->3-->9-->nullptr\n");
   38|       |
   39|      0|  skp.add(vector<int>{7, 5});
   40|      1|  outSS.str("");
   41|      1|  outSS << skp;
   42|      1|  cout << skp; // my tester
   43|      1|  assert(outSS.str() == "[level: 1] 1-->3-->5-->7-->9-->nullptr\n");
   44|       |
   45|      0|  assert(skp.contains(1) && skp.contains(7) && skp.contains(9));
   46|      0|  assert(!skp.contains(0) && !skp.contains(20));
   47|       |
   48|       |  // TODO(student) check there are no memory leaks after test completed
   49|      0|  cout << "test1 done." << endl;
   50|      1|}
   51|       |
   52|       |// testing the copy constructor for the SkipList
   53|      1|void test2() {
   54|      1|  stringstream outSS;
   55|      1|  SkipList *skp1 = new SkipList;
   56|      1|  skp1->add(vector<int>{9, 1, 7, 5});
   57|      1|  outSS.str("");
   58|      1|  outSS << *skp1;
   59|      1|  cout << *skp1; // my tester
   60|      1|  assert(outSS.str() == "[level: 1] 1-->5-->7-->9-->nullptr\n");
   61|       |
   62|      0|  SkipList *skp2 = new SkipList(*skp1);
   63|      1|  cout << "Created skp2 successfully" << endl;
   64|       |  // skp2->add(100);// my tester
   65|      1|  cout << *skp1; // my tester
   66|      1|  cout << *skp2; // my tester
   67|      1|  delete skp1;
   68|      1|  outSS.str("");
   69|      1|  outSS << *skp2;
   70|      1|  assert(outSS.str() == "[level: 1] 1-->5-->7-->9-->nullptr\n");
   71|      0|  delete skp2;
   72|       |  // TODO(student) check there are no memory leaks after test completed
   73|      1|  cout << "test2 done." << endl;
   74|      1|}
   75|       |
   76|       |// testing SkipList with multiple levels
   77|      1|void test3() {
   78|      1|  stringstream outSS;
   79|       |  // SkipList skp(3, 80);
   80|      1|  SkipList skp(3, 60);
   81|       |
   82|      1|  skp.add(vector<int>{9, 1, 7, 5, 3, 20});
   83|      1|  cout << skp << endl;
   84|       |
   85|      1|  outSS << skp;
   86|      1|  assert(outSS.str() == "[level: 3] nullptr\n"
   87|      1|                        "[level: 2] 3-->5-->nullptr\n"
   88|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
   89|       |
   90|       |  // assert(outSS.str() == "[level: 3] 7-->nullptr\n"
   91|       |  //                       "[level: 2] 3-->7-->nullptr\n"
   92|       |  //                       "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
   93|       |
   94|      0|  skp.add(vector<int>{-20, 100});
   95|      1|  outSS.str("");
   96|      1|  outSS << skp;
   97|      1|  cout << skp << endl;
   98|      1|  assert(outSS.str() ==
   99|      1|         "[level: 3] -20-->nullptr\n"
  100|      1|         "[level: 2] -20-->3-->5-->nullptr\n"
  101|      1|         "[level: 1] -20-->1-->3-->5-->7-->9-->20-->100-->nullptr\n");
  102|       |
  103|       |  // // assert(outSS.str() ==
  104|       |  // //        "[level: 3] -20-->7-->100-->nullptr\n"
  105|       |  // //        "[level: 2] -20-->3-->7-->100-->nullptr\n"
  106|       |  // //        "[level: 1] -20-->1-->3-->5-->7-->9-->20-->100-->nullptr\n");
  107|       |
  108|       |  // // TODO(student) check that contains searches from top level down
  109|      0|  assert(skp.contains(1) && skp.contains(7) && skp.contains(9));
  110|      0|  assert(!skp.contains(0) && !skp.contains(200));
  111|      0|  assert(skp.contains(-20) && skp.contains(100));
  112|       |
  113|      0|  SkipList skp2(3, 30);
  114|      1|  skp2.add(vector<int>{9, 1, 7, 5, 3, 20});
  115|      1|  outSS.str("");
  116|      1|  outSS << skp2;
  117|      1|  cout << skp2 << endl;
  118|      1|  assert(outSS.str() == "[level: 3] nullptr\n"
  119|      1|                        "[level: 2] 3-->5-->9-->nullptr\n"
  120|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  121|       |
  122|       |  //   // assert(outSS.str() == "[level: 3] nullptr\n"
  123|       |  // //                       "[level: 2] 3-->5-->nullptr\n"
  124|       |  // //                       "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  125|       |
  126|      0|  assert(skp2.contains(3) && skp2.contains(5) && skp2.contains(20));
  127|      0|  assert(!skp2.contains(-3) && !skp2.contains(4) && !skp2.contains(200));
  128|       |  // TODO(student) check there are no memory leaks after test completed
  129|      0|  cout << "test3 done." << endl;
  130|      1|}
  131|       |
  132|       |// removing from multi-level SkipList
  133|      1|void test4() {
  134|      1|  stringstream outSS;
  135|      1|  SkipList skp(3, 50);
  136|      1|  skp.add(vector<int>{9, 1, 7, 5, 3, 20});
  137|       |
  138|      1|  cout << skp;
  139|      1|  outSS << skp;
  140|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  141|      1|                        "[level: 2] 3-->5-->7-->9-->20-->nullptr\n"
  142|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  143|      0|  SkipList skp2(skp);
  144|      1|  cout << "skp2\n" << skp2;
  145|      1|  assert(skp.remove(1));
  146|      0|  cout << "skp\n" << skp;
  147|      1|  assert(!skp.remove(100));
  148|      0|  assert(skp.remove(9));
  149|      0|  cout << "skp\n" << skp;
  150|       |
  151|      1|  outSS.str("");
  152|      1|  outSS << skp;
  153|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  154|      1|                        "[level: 2] 3-->5-->7-->20-->nullptr\n"
  155|      1|                        "[level: 1] 3-->5-->7-->20-->nullptr\n");
  156|       |
  157|       |  // skp2 should be unchanged
  158|      0|  outSS.str("");
  159|      1|  outSS << skp2;
  160|      1|  cout << "skp2\n" << skp2;
  161|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  162|      1|                        "[level: 2] 3-->5-->7-->9-->20-->nullptr\n"
  163|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  164|       |  // TODO(student) check there are no memory leaks after test completed
  165|      0|  cout << "test4 done." << endl;
  166|      1|}
  167|       |
  168|      1|int main() {
  169|      1|  test1();
  170|      1|  test2();
  171|      1|  test3();
  172|      1|  test4();
  173|      1|  cout << "Done." << endl;
  174|      1|  return 0;
  175|      1|}

/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/random.cpp:
    1|       |#include "random.h"
    2|       |#include <vector>
    3|       |
    4|     31|int Random::random() {
    5|     31|  if (counter >= NUMS.size()) {
    6|      0|    counter = 0;
    7|      0|  }
    8|     31|  return NUMS[counter++];
    9|     31|}
   10|       |
   11|       |int Random::counter = 0;
   12|       |
   13|       |const vector<int> Random::NUMS = {
   14|       |    1804289383, 846930886,  1681692777, 1714636915, 1957747793, 424238335,
   15|       |    719885386,  1649760492, 596516649,  1189641421, 1025202362, 1350490027,
   16|       |    783368690,  1102520059, 2044897763, 1967513926, 1365180540, 1540383426,
   17|       |    304089172,  1303455736, 35005211,   521595368,  294702567,  1726956429,
   18|       |    336465782,  861021530,  278722862,  233665123,  2145174067, 468703135,
   19|       |    1101513929, 1801979802, 1315634022, 635723058,  1369133069, 1125898167,
   20|       |    1059961393, 2089018456, 628175011,  1656478042, 1131176229, 1653377373,
   21|       |    859484421,  1914544919, 608413784,  756898537,  1734575198, 1973594324,
   22|       |    149798315,  2038664370, 1129566413, 184803526,  412776091,  1424268980,
   23|       |    1911759956, 749241873,  137806862,  42999170,   982906996,  135497281,
   24|       |    511702305,  2084420925, 1937477084, 1827336327, 572660336,  1159126505,
   25|       |    805750846,  1632621729, 1100661313, 1433925857, 1141616124, 84353895,
   26|       |    939819582,  2001100545, 1998898814, 1548233367, 610515434,  1585990364,
   27|       |    1374344043, 760313750,  1477171087, 356426808,  945117276,  1889947178,
   28|       |    1780695788, 709393584,  491705403,  1918502651, 752392754,  1474612399,
   29|       |    2053999932, 1264095060, 1411549676, 1843993368, 943947739,  1984210012,
   30|       |    855636226,  1749698586, 1469348094, 1956297539
   31|       |
   32|       |};

/home/cssuwbstudent/CSS 342/2021au342d-p4-skiplist-proaro2001/skiplist.cpp:
    1|       |#include "skiplist.h"
    2|       |#include "random.h"
    3|       |#include <cassert>
    4|       |#include <climits>
    5|       |#include <cstdlib>
    6|       |#include <iostream>
    7|       |#include <unordered_map>
    8|       |
    9|       |using namespace std;
   10|       |
   11|       |// checks if the value needs to be inserted at a higher level
   12|     31|bool SkipList::shouldInsertAtHigherLevel() const {
   13|     31|  return probability >= Random::random() % 100;
   14|     31|}
   15|       |
   16|       |// you code goes here
   17|     27|ostream &operator<<(ostream &out, const SkipList &skip) {
   18|     82|  for (int i = skip.levels; i > 0; i--) {
   19|     55|    out << "[level: " << i << "] ";
   20|     55|    SNode *dummy = skip.head->next[i - 1];
   21|    244|    while (dummy != nullptr) {
   22|    189|      out << dummy->val << "-->";
   23|    189|      dummy = dummy->next[i - 1];
   24|    189|    }
   25|     55|    out << "nullptr\n"; // it reaches the end of the level
   26|     55|  }
   27|     27|  return out;
   28|     27|}
   29|       |/*
   30|       |  This is codes for SNode class
   31|       |*/
   32|       |
   33|       |// constructor
   34|     34|SNode::SNode(int val) {
   35|     34|  this->val = val;
   36|     34|  next.push_back(nullptr);
   37|     34|}
   38|       |// copy constructor
   39|     70|SNode::SNode(const SNode &other) {
   40|     70|  this->val = other.val;
   41|     70|  this->next = copyHeadVector(other);
   42|     70|}
   43|       |
   44|       |// helper method to get other's head
   45|     70|vector<SNode *> SNode::copyHeadVector(const SNode &other) {
   46|     70|  vector<SNode *> temp(other.next.begin(), other.next.end());
   47|    270|  for (int i = 0; i < other.next.size(); i++) {
   48|    200|    if (other.next[i] != nullptr) {
   49|     68|      temp[i] = new SNode(*other.next[i]);
   50|    132|    } else {
   51|    132|      temp[i] = nullptr;
   52|    132|    }
   53|    200|  }
   54|     70|  return temp;
   55|     70|}
   56|       |
   57|       |/*
   58|       |  This is codes for SkipList class
   59|       |*/
   60|       |
   61|       |// default SkipList has Depth of 1, just one doubly-linked list
   62|       |SkipList::SkipList(int levels, int probability)
   63|      5|    : levels(levels), probability(probability) {
   64|      5|  head = new SNode();
   65|     11|  for (int i = 1; i < levels; i++) {
   66|      6|    head->next.push_back(nullptr);
   67|      6|  }
   68|      5|}
   69|       |
   70|       |// copy constructor
   71|      2|SkipList::SkipList(const SkipList &other) {
   72|      2|  this->levels = other.levels;
   73|      2|  this->probability = other.probability;
   74|      2|  this->head = new SNode(*other.head);
   75|      2|}
   76|       |
   77|       |// destructor
   78|      7|SkipList::~SkipList() {
   79|     51|  while (head != nullptr) {
   80|     44|    SNode *deleteMe = head;
   81|     44|    head = head->next[0];
   82|     44|    delete deleteMe;
   83|     44|  }
   84|      7|};
   85|       |
   86|       |// Add to list, assume no duplicates
   87|     29|void SkipList::add(int val) {
   88|     29|  unordered_map<int, SNode *> path;
   89|     29|  findPath(val, head, head->next[levels - 1], path, levels - 1);
   90|       |  // addHelper ( val , head, head->next[levels-1] , path);
   91|     29|  int lvs = 0;
   92|     29|  SNode *temp = new SNode(val);
   93|     69|  for (int i = 1; i < levels; i++) {
   94|     40|    temp->next.push_back(nullptr);
   95|     40|  }
   96|     71|  while (lvs < levels && (lvs == 0 || shouldInsertAtHigherLevel())) {
   97|     42|    addHelper(path[lvs], path[lvs]->next[lvs],  lvs, temp);
   98|     42|    lvs++;
   99|     42|  }
  100|     29|}
  101|       |
  102|       |// helper function
  103|     42|void SkipList::addHelper(SNode *prev, SNode *curr, int lvs,SNode *addMe) {
  104|     42|  if (lvs == 0) {
  105|     29|    prev->next[0] = addMe;
  106|     29|    addMe->next[0] = curr;
  107|     29|  } else {
  108|     13|    if (curr == nullptr) {
  109|      6|      prev->next[lvs] = addMe;
  110|      7|    } else {
  111|      7|      prev->next[lvs] = addMe;
  112|      7|      addMe->next[lvs] = curr;
  113|      7|    }
  114|     13|  }
  115|     42|}
  116|       |
  117|       |// helper function to find path
  118|       |void SkipList::findPath(int val, SNode *prev, SNode *curr,
  119|    131|                        unordered_map<int, SNode *> &path, int lvs) {
  120|    131|  if (lvs < 0) {
  121|     29|    return;
  122|     29|  }
  123|    102|  if (curr == nullptr || val < curr->val) {
  124|     69|    path.emplace(lvs, prev); // record the previous path into path
  125|     69|    lvs--;
  126|     69|    findPath(val, prev, prev->next[lvs], path, lvs);
  127|     69|  } else {
  128|     33|    findPath(val, curr, curr->next[lvs], path, lvs);
  129|     33|  }
  130|    102|}
  131|       |
  132|       |// Add to list, assume no duplicates
  133|      6|void SkipList::add(const vector<int> &values) {
  134|     26|  for (int x : values) {
  135|     26|    this->add(x);
  136|     26|  }
  137|      6|}
  138|       |
  139|       |// return true if found in SkipList
  140|     18|bool SkipList::contains(int val) const {
  141|     18|  return containsHelper(val, head->next[0]);
  142|     18|}
  143|       |// helper function for contains
  144|     94|bool SkipList::containsHelper(int val, SNode *n) const {
  145|     94|  if (n == nullptr) {
  146|      7|    return false;
  147|      7|  }
  148|     87|  if (n->val == val) {
  149|     11|    return true;
  150|     11|  }
  151|     76|  return containsHelper(val, n->next[0]);
  152|     87|}
  153|       |
  154|       |// return true if successfully removed
  155|      3|bool SkipList::remove(int val) {
  156|      3|  int lvs = levels - 1;
  157|      9|  while (lvs > 0 && !removeHelper(val, lvs, head, head->next[lvs])) {
  158|      6|    lvs--;
  159|      6|  }
  160|      3|  return removeHelper(val, 0, head, head->next[0]);
  161|      3|}
  162|       |
  163|       |// helper function for remove function
  164|     26|bool SkipList::removeHelper(int val, int lvs, SNode *prev, SNode *curr) {
  165|     26|  if (curr == nullptr) {
  166|      3|    return false;
  167|      3|  }
  168|     23|  if (val == curr->val) {
  169|      3|    if (lvs == 0) {
  170|      2|      prev->next[lvs] = curr->next[lvs];
  171|      2|      delete curr;
  172|      2|      return true;
  173|      2|    }
  174|      1|    prev->next[lvs] = curr->next[lvs];
  175|     20|  } else if (val > curr->val && val > prev->val) {
  176|     17|    return removeHelper(val, lvs, curr, curr->next[lvs]);
  177|     17|  }
  178|      4|  return false;
  179|     23|}

Mon Nov 28 06:18:57 UTC 2022
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
